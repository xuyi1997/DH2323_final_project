Shader "Unlit/simpletoon"
{
	Properties
	{
		_MainTex("Texture", 2D) = "white" {}
		_DiffusePower("Diffuse Power", Float) = 1.0
		_ToonEffect("Toon Effect",range(0,1)) = 0.5//卡通化程度（二次元与三次元的交界线）
		_Steps("Steps of toon",range(0,9)) = 3//色阶层数

	}
		SubShader
	{

		Pass
	{
		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag

		#include "UnityCG.cginc"
		#include "Lighting.cginc"
		#include "AutoLight.cginc"
		struct appdata
	{
		float4 vertex : POSITION;
		float2 uv : TEXCOORD0;
		float3 normal : NORMAL;
	};

	struct v2f
	{
		float2 uv : TEXCOORD0;
		float4 vertex : SV_POSITION;
		float3 normalDir : TEXCOORD1;
	};

	v2f vert(appdata v)
	{
		v2f o;
		o.vertex = UnityObjectToClipPos(v.vertex);
		o.uv = v.uv;
		o.normalDir = UnityObjectToWorldNormal(v.normal);
		return o;
	}

	sampler2D _MainTex;
	float _DiffusePower;
	float _ToonEffect;
	int _Steps;

	fixed4 frag(v2f i) : SV_Target
	{

		float3 normalDirection = normalize(i.normalDir);
		float lightDirection = normalize(_WorldSpaceLightPos0.xyz);
		float3 lightColor = _LightColor0.rgb;


		float attenuation = LIGHT_ATTENUATION(i);
		float3 attenColor = attenuation * _LightColor0.xyz;

		float NdotL = max(0,dot(normalDirection,lightDirection));
		float3 directionDiffuse = pow(NdotL, _DiffusePower) * attenColor; 
		float3 inDirectionDiffuse = float3(0,0,0) + UNITY_LIGHTMODEL_AMBIENT.rgb;

		float3 texColor = tex2D(_MainTex, i.uv).rgb;
		float3 diff = directionDiffuse + inDirectionDiffuse;
		diff = (diff + 1) / 2;
		diff = smoothstep(0, 1, diff);
		//Discrete the color
		float toon = floor(diff*_Steps) / _Steps;
		diff = lerp(diff, toon, _ToonEffect);
		float3 diffuseColor = texColor *diff;
		float4 finalColor = float4(diffuseColor,1);

		return finalColor;
	}
		ENDCG
	}
	}
}
